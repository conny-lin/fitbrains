function A = importfile_user_eq_answers(filename, startRow, endRow,outputtype)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   USEREQANSWERS = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   USEREQANSWERS = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   usereqanswers = importfile('user_eq_answers.txt', 1, 941703);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/03/02 14:44:42
%% check database versions
fileversion = '';
if isempty(strfind(filename,'20151020')) == 0
    fileversion = '20151020';
end
if isempty(strfind(filename,'20160224')) == 0
    fileversion = '20160224';
end

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = inf;
end
if nargin <=3
   outputtype = 'table'; 
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
switch outputtype
    case 'table'
        switch fileversion
            case '20160224'
                A = table;
                A.user_id = cell2mat(raw(:, 1));
                A.answer_id = cell2mat(raw(:, 2));
            case '20151020'
                A = table;
                A.id = cell2mat(raw(:, 1));
                A.user_id = cell2mat(raw(:, 2));
                A.device_id = cell2mat(raw(:, 3));
                A.answer_id = cell2mat(raw(:, 4));
                A.answered_at_utc = cell2mat(raw(:, 5));
        %         usereqanswers.created_at_utc = cell2mat(raw(:, 6));
        end
    case 'array'
        switch fileversion
            case '20160224'
                A = zeros(size(raw,1),2);
                A(:,1) = cell2mat(raw(:, 1));
                A(:,2) = cell2mat(raw(:, 2));
            case '20151020'
                A = zeros(size(raw,1),5);
                A(:,1) = cell2mat(raw(:, 1));
                A(:,2) = cell2mat(raw(:, 2));
                A(:,3) = cell2mat(raw(:, 3));
                A(:,4) = cell2mat(raw(:, 4));
                A(:,5) = cell2mat(raw(:, 5));
        %         usereqanswers.created_at_utc = cell2mat(raw(:, 6));
        end
end









